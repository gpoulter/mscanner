.. -*- mode: rst -*-

=====================================================
MScanner: Retrieving Medline citations using examples
=====================================================

:Author: Graham Poulter
                               

MScanner takes a set Medline citations, and trains a classifier to
search for citations similar to the set as a whole.  

This source code is provided for people who wish to use MScanner as a
starting point for another Medline classifier, and those who wish to
construct more advanced operations - such as using MScanner output as
the input to a Natural Language Processing system.

If you just wish to query with some of your own data, rather use the
public service on the MScanner_ homepage.

.. _MScanner: http://mscanner.stanford.edu


Installation
============

  * Unzip the source distribution into some directory ``INSTALL``.  On
    a Unix-like system, ``INSTALL`` might be ``/home/joe/mscanner``.

  * Create any directories required by the `Directory Layout`_.

  * Add ``INSTALL/source`` to the ``PYTHONPATH`` environment variable.
    If done correctly, you should be able to ``import mscanner`` in a
    Python shell.

  * Go to ``INSTALL/source/mscanner/cscore`` and run GNU ``make`` to
    compile the ``cscore.c`` program (Windows .exe and dll are
    provided)

  * Install the Dependencies_ 

  * Set up the Configuration_
  
  * Place the input `Input Data`_ in the correct locations.

  * Run the unit tests by going into ``INSTALL/source/tests`` and
    running ``python __init__.py``

  * Run ``INSTALL/source/bin/update.py`` to parse Medline and create
    the databases in ``INSTALL/data/cache``.

  * Run the `Web Interface`_ or use ``INSTALL/source/bin/query.py`` as
    as starting point for constructing a custom query operation.


Directory Layout
================

The structure of  the ``INSTALL`` directory after extraction is as follows::
                                          
     source/bin -- Executables (utilities and customised analyses)
     source/doc -- INSTALL.txt
     source/doc/api -- Generated API documentation in HTML
     source/htdocs -- Web interface package
     source/htdocs/static -- Static data available over the web
     source/htdocs/static/output -- Where web outputs are placed
     source/mscanner -- Core MScanner package
     source/tests -- Unit tests for the MScanner package

Additionally create these directories to hold data::

     data/cache -- MScanner databases
     data/corpora -- Input files
     data/medline -- The downloaded Medline distribution
     data/queue -- Web interface task queue
    

Input Data
==========

MScanner requires the following data as input:

Medline_
 After signing a memorandum of understanding with the National Library
 of Medicine, Medline can be downloaded via FTP.  The FTP distribution
 is a directory of .xml.gz files.  MScanner looks for it in
 ``INSTALL/data/medline`` (set by the ``rc.medline`` parameter)

Input PubMed IDs 
 Text file with one PubMed ID per line.  Data sets should be placed in
 ``INSTALL/data/corpora`` (set by the ``rc.corpora`` parameter)

.. _Medline: http://www.nlm.nih.gov/bsd/licensee/2007_stats/baseline_doc.html


Dependencies
============

Python_
 The Python programming language (version 2.5)

Numpy_
 For vector operations.
 
path_
 For path operations.

Cheetah_
 Templating engine for generating HTML outputs.

`Gnuplot-py`_
 For plotting cross validation output graphs. Gnuplot-py requires
 Gnuplot_ to be installed.

`web.py`_
 Python web application framework (for running the web interface).

.. _Python: http://www.python.org
.. _Numpy: http://numpy.scipy.org
.. _path: http://www.jorendorff.com/articles/python/path
.. _Cheetah: http://www.cheetahtemplate.org
.. _Gnuplot-py: http://gnuplot-py.sourceforge.net/
.. _Gnuplot: http://www.gnuplot.info/ 
.. _web.py: http://webpy.org


Web Interface
=============

The web interface requires `web.py`_ to be installed. It can be run
under Apache as a CGI script, although web.py also has a built-in
webserver.

Start the queue process:

  Execute ``INSTALL/source/htdocs/queue.py``.  This long-running
  process watches ``INSTALL/data/queue`` for descriptor files
  deposited by the web interface, performs the requested
  query/validation tasks, and deposits the output in the static HTML
  directory.

Start the internal web server:

  Execute ``INSTALL/source/htdocs/controller.py``.  The web server
  will run on ``http://localhost:8080``.  The web interface takes user
  input, reports on status of MScanner, and places descriptor files in
  the queue directory on submission of a query.

To run under Apache:

   Configure Apache to use ``controller.py`` as a CGI script.  Without
   URL rewriting you will have to access pages as 
   ``http://localhost/controller.py/form``.


Re-generating API Documentation
-------------------------------

API documentation is linked from the MScanner_ home page, and may
already be provided under ``INSTALL/source/doc/api``.

To re-generate the documentation, first install Epydoc_ , then navigate to
the the ``INSTALL/source`` directory, and run::

    epydoc.py --config=doc/epydoc.txt

To convert ``source/doc/INSTALL.txt`` (which is written in the
reStructuredText_ format) into ``INSTALL.html``, first install
Docutils_, then navigate to ``INSTALL/source/doc`` and run::

    rst2html.py INSTALL.txt > INSTALL.html

.. _Epydoc: http://epydoc.sourceforge.net
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Docutils: http://docutils.sourceforge.net
  

Configuration
=============

Default configuration is in
``INSTALL/source/mscanner/configuration.py``, whih has descriptions of
the MScanner rc-parameters.  The ``rc`` object holds all the global
constants used by the MScanner library.

Defaults can be overridden dynamically as follows::
         
   from mscanner.configuration import rc
   from mscanner.queryenv import Query
   rc.dataset = "something"
   rc.limit = 500 # At most 500 articles to be returned
   query = Query(rc.working / "query" / rc.dataset)
   query.query(rc.corpora / "something-pmids.txt")

